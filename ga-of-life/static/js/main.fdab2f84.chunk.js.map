{"version":3,"sources":["workers/EaWorker.js","components/EaGraph.js","components/EaRunner.js","components/EaState.js","shared/Constants.js","components/CaRunner.js","components/GenotypePlot.js","components/PhenotypePlot.js","App.js","reportWebVitals.js","index.js"],"names":["addMethods","methods","module","exports","w","Worker","name","Highcharts","require","EaGraph","eaState","useState","history","setHistory","chart","setChart","initChart","title","text","yAxis","opposite","series","type","marker","enabled","data","useEffect","generations","length","shift","slice","addPoint","maxFitness","evaluationsDelta","destroy","id","style","height","width","EaRunner","onStep","autoRun","setAutoRun","isRunning","setIsRunning","executeStep","setExecuteStep","eaRunner","setEaRunner","runTime","setRunTime","a","console","info","eaWorker","worker","init","terminate","startStep","Date","getTime","step","then","results","endStep","newRunTime","Math","round","Button","onClick","reset","disabled","EaState","Container","Row","Col","className","xs","evaluations","caSteps","wasmCa","GRID_SIZE","wasmInit","wasm","GameOfLife","drawCells","ctx","ca","toggled","beginPath","row","col","get","fillStyle","fillRect","stroke","drawContext","document","getElementById","getContext","updateToggled","CaRunner","seed","setCa","Array","autoPlay","setAutoPlay","scheduleStep","setScheduleStep","onTogglePlayClick","strokeStyle","i","moveTo","lineTo","j","drawGrid","timer","setTimeout","clearTimeout","forEach","_","x","y","charAt","set","seedCa","intensity","boundedIntensity","min","max","Number","GenotypePlot","genotype","plotId","plotSettings","setPlotSettings","canvas","canvasWidth","horizontalCellSpace","verticalCellSpace","bigCellMaxWidth","floor","bigCellMaxHeight","bigCellMaxSize","cellSize","bigCellSize","settings","x0","y0","h","index","plotCell","drawGenotype","clearRect","clearPlot","PhenotypePlot","phenotype","cellMaxWidth","cellMaxHeight","drawPhenotype","App","setEaState","lg","geneDistribution","bestGenotype","cellDistribution","bestPhenotype","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fdab2f84.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"init\",\"reset\",\"step\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"c7ae1198431c3a5df22e.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import { useEffect, useState } from 'react';\n\nconst Highcharts = require('highcharts');\nrequire('highcharts/modules/exporting')(Highcharts);\n\nconst historyLen = 250;\n\nexport function EaGraph({ eaState }) {\n    const [history, setHistory] = useState([]);\n    const [chart, setChart] = useState();\n\n    const initChart = function() {\n        setChart(\n            Highcharts.chart('ea-graph', {\n                title: {\n                    text: \"Evolutionary Algorithm\",\n                },\n                yAxis: [{\n                    title: {\n                        text: 'Fitness'\n                    }\n                }, {\n                    title: {\n                        text: 'Evaluations'\n                    },\n                    opposite: true\n                }],\n                series: [\n                    {\n                        name: 'Max. fitness',\n                        type: 'line',\n                        marker: { enabled: false },\n                        data: [],\n                    },\n                    {\n                        name: 'Num. evaluations',\n                        type: 'line',\n                        marker: { enabled: false },\n                        yAxis: 1,\n                        data: [],\n                    },\n                ]\n            })\n        );\n    };\n\n    useEffect(() => {\n        if (!chart) {\n            return\n        }\n        if (!eaState) {\n            // EA was reset. Reset graph, if not yet already done.\n            if (history.length > 0) {\n                setHistory([]);\n\n                chart.destroy();\n                initChart();\n            }\n        } else {\n            // Add EA state to graph, if not yet already done.\n            if (eaState?.generations !== history[history.length - 1]?.generations) {\n                var shift = false;\n                if (history.length < historyLen) {\n                    setHistory([\n                        ...history, eaState\n                    ]);\n                } else {\n                    setHistory([\n                        ...history.slice(1, historyLen), eaState\n                    ]);\n                    shift = true;\n                }\n                chart.series[0].addPoint([eaState.generations, eaState.maxFitness], true, shift);\n                chart.series[1].addPoint([eaState.generations, eaState.evaluationsDelta], true, shift);\n            }\n        }\n    }, [eaState, history, chart])\n\n    useEffect(() => {\n        initChart();\n    }, []);\n\n    return (\n        <div id=\"ea-graph\" style={{height: \"400px\", width: \"100%\" }} ></div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport worker from 'workerize-loader!../workers/EaWorker';\n\nexport function EaRunner({ onStep }) {\n    const [autoRun, setAutoRun] = useState(false);\n    const [isRunning, setIsRunning] = useState(false);\n    const [executeStep, setExecuteStep] = useState(false);\n    const [eaRunner, setEaRunner] = useState();\n    const [runTime, setRunTime] = useState(0);\n\n    const onResetClick = () => {\n        eaRunner.reset();\n        setRunTime(0);\n\n        // Notify observers that EA was reset\n        onStep?.(null);\n    }\n    const onStartClick = () => {\n        setAutoRun(true);\n    }\n    const onPauseClick = () => {\n        setAutoRun(false);\n    }\n    const onStepClick = () => {\n        setExecuteStep(true);\n    }\n\n    // Init EA in worker thread\n    useEffect(() => {\n        async function init() {\n            console.info(\"Setting worker\");\n            const eaWorker = new worker();\n            await eaWorker.init();    \n            setEaRunner(eaWorker);\n        }\n\n        if (!eaRunner) {\n            init();\n        } else {\n            return function cleanup() {\n                eaRunner.terminate();\n            }\n        }\n    }, [eaRunner, setEaRunner]);\n\n    useEffect(() => {\n        if (!isRunning) {\n            if (executeStep || autoRun) {\n                setExecuteStep(false);\n                setIsRunning(true);\n                const startStep = new Date().getTime();\n\n                eaRunner.step().then(results => {\n                    const endStep = new Date().getTime();\n                    const newRunTime = runTime + (endStep - startStep);\n                    setIsRunning(false);\n                    setRunTime(runTime => runTime + (endStep - startStep));\n                    onStep?.({ ...results, runTime: Math.round(newRunTime / 1000) });\n                });\n            }\n        }\n    }, [isRunning, executeStep, autoRun, eaRunner, runTime, onStep]);\n\n    return (\n        <div>\n            <Button onClick={onResetClick} disabled={isRunning || autoRun}>Reset</Button>\n            <Button onClick={onStartClick} disabled={isRunning || autoRun}>Run</Button>\n            <Button onClick={onPauseClick} disabled={!autoRun}>Pause</Button>\n            <Button onClick={onStepClick} disabled={isRunning || autoRun}>Step</Button>\n        </div>\n    );\n}","import Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n\nexport function EaState({ eaState }) {\n    return (eaState && (\n        <Container>\n            <Row>\n                <Col className=\"Label\" xs={8}>Num. generations</Col>\n                <Col className=\"NumValue\" xs={4}>{eaState.generations}</Col>\n            </Row>\n            <Row>\n                <Col className=\"Label\" xs={8}>Num. evaluations</Col>\n                <Col className=\"NumValue\" xs={4}>{eaState.evaluations}</Col>\n            </Row>\n            <Row>\n                <Col className=\"Label\" xs={8}>Num. CA steps</Col>\n                <Col className=\"NumValue\" xs={4}>{eaState.caSteps}</Col>\n            </Row>\n            <Row>\n                <Col className=\"Label\" xs={8}>Max. fitness</Col>\n                <Col className=\"NumValue\" xs={4}>{eaState.maxFitness}</Col>\n            </Row>\n            <Row>\n                <Col className=\"Label\" xs={8}>Run time [s]</Col>\n                <Col className=\"NumValue\" xs={4}>{eaState.runTime}</Col>\n            </Row>\n            <Row>\n                <Col className=\"Label\" xs={8}>CA steps [s<sup>-1</sup>]</Col>\n                <Col className=\"NumValue\" xs={4}>{eaState.runTime > 0 ? Math.round(eaState.caSteps / eaState.runTime) : \"-\"}</Col>\n            </Row>\n        </Container>\n    )) || null;\n}","export const GRID_SIZE = 64;\nexport const SEED_SIZE = 8;\n\nexport const NUM_GENOTYPE_GROUPS = 8;","import { useEffect, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport { GRID_SIZE, SEED_SIZE } from '../shared/Constants';\n\nconst CELL_SIZE = 4;\nconst GRID_COLOR = \"#CCCCCC\";\nconst EMPTY_COLOR = \"#FFFFFF\";\nconst ALIVE_COLOR = \"#000000\";\nconst LIVED_COLOR = \"#A0A0A0\";\n\nlet wasmCa;\nexport async function wasmInit() {\n    if (!wasmCa) {\n        const wasm = await import('ga-of-life');\n\n        wasmCa = new wasm.GameOfLife(GRID_SIZE, GRID_SIZE);\n    }\n\n    return wasmCa;\n};\n\nfunction drawGrid(ctx) {\n    ctx.beginPath();\n    ctx.strokeStyle = GRID_COLOR;\n  \n    // Vertical lines.\n    for (let i = 0; i <= GRID_SIZE; i++) {\n        ctx.moveTo(i * (CELL_SIZE + 1) + 1, 0);\n        ctx.lineTo(i * (CELL_SIZE + 1) + 1, (CELL_SIZE + 1) * GRID_SIZE + 1);\n    }\n  \n    // Horizontal lines.\n    for (let j = 0; j <= GRID_SIZE; j++) {\n        ctx.moveTo(0,                               j * (CELL_SIZE + 1) + 1);\n        ctx.lineTo((CELL_SIZE + 1) * GRID_SIZE + 1, j * (CELL_SIZE + 1) + 1);\n    }\n  \n    ctx.stroke();\n}\n\nfunction drawCells(ctx, ca, toggled) {\n    ctx.beginPath();\n  \n    for (let row = 0; row < GRID_SIZE; row++) {\n        for (let col = 0; col < GRID_SIZE; col++) {\n        \n            if (ca.get(col, row)) {\n                ctx.fillStyle = ALIVE_COLOR;\n            } else if (toggled[col + row * GRID_SIZE]) {\n                ctx.fillStyle = LIVED_COLOR;\n            } else {\n                ctx.fillStyle = EMPTY_COLOR;\n            }\n  \n            ctx.fillRect(\n                col * (CELL_SIZE + 1) + 1,\n                row * (CELL_SIZE + 1) + 1,\n                CELL_SIZE,\n                CELL_SIZE\n            );\n        }\n    }\n  \n    ctx.stroke();\n}\n\nfunction drawContext() {\n    const canvas = document.getElementById(\"ca-canvas\");\n    return canvas.getContext('2d');\n}\n\nfunction updateToggled(ca, toggled) {\n    for (let row = 0; row < GRID_SIZE; row++) {\n        for (let col = 0; col < GRID_SIZE; col++) {\n            if (ca.get(col, row)) {\n                toggled[col + row * GRID_SIZE] = true;\n            }\n        }\n    }\n}\n\nfunction executeStep(ca, toggled) {\n    ca.step();\n    updateToggled(ca, toggled);\n    drawCells(drawContext(), ca, toggled);\n}\n\nfunction seedCa(ca, seed) {\n    ca.reset();\n\n    const xy0 = (GRID_SIZE - SEED_SIZE) / 2;\n    for (let x = 0; x < SEED_SIZE; x++) {\n        for (let y = 0; y < SEED_SIZE; y++) {\n            if (seed.charAt(x + y * SEED_SIZE) !== '0') {\n                ca.set(x + xy0, y + xy0);\n            }\n        }\n    }\n}\n\nexport function CaRunner({ seed }) {\n    const [ca, setCa] = useState();\n    const [toggled, _] = useState(new Array(GRID_SIZE * GRID_SIZE));\n    const [autoPlay, setAutoPlay] = useState();\n    const [scheduleStep, setScheduleStep] = useState(0);\n\n    const clearToggled = () => {\n        toggled.forEach((_, i, a) => { a[i] = 0; });\n    }\n\n    const onSeedClick = () => {\n        clearToggled();\n        seedCa(ca, seed);\n\n        drawCells(drawContext(), ca, toggled);\n    }\n\n    const onStepClick = () => {\n        executeStep(ca, toggled);\n    }\n    const onTogglePlayClick = () => {\n        setAutoPlay(!autoPlay);\n    }\n\n    useEffect(() => {\n        async function init() {\n            console.info(\"Loading CA wasm\");\n            setCa(await wasmInit());\n        }\n\n        if (!ca) {\n            init();\n        } else {\n            const ctx = drawContext();\n            drawGrid(ctx);\n        }\n    }, [ca, toggled]);\n\n    useEffect(() => {\n        if (autoPlay) {\n            const timer = setTimeout(() => {\n                executeStep(ca, toggled);\n                // Trigger next update\n                setScheduleStep(scheduleStep + 1);\n            }, 10);\n\n            return function cleanup() {\n                clearTimeout(timer);\n            }\n        }\n    });\n\n    return (<Container>\n        <Row>\n            <Col>\n                <Button onClick={onSeedClick} disabled={!ca || autoPlay}>Seed</Button>\n                <Button onClick={onTogglePlayClick} disabled={!ca || autoPlay}>Play</Button>\n                <Button onClick={onTogglePlayClick} disabled={!(ca && autoPlay)}>Pause</Button>\n                <Button onClick={onStepClick} disabled={!ca || autoPlay}>Step</Button>\n            </Col>\n        </Row>\n        <Row>\n            <Col>\n                <canvas id=\"ca-canvas\"\n                    width={(CELL_SIZE + 1) * GRID_SIZE}\n                    height={(CELL_SIZE + 1) * GRID_SIZE}></canvas>\n            </Col>\n        </Row>\n    </Container>);\n}","import { useEffect, useState } from 'react';\nimport { NUM_GENOTYPE_GROUPS, SEED_SIZE } from '../shared/Constants';\n\n// Separation between the big cells\nconst S1 = 3;\n// Internal separation within the big cells\nconst S2 = 1;\n// Separation between the top rows and the seed patch\nconst S3 = 8;\n\nfunction fillStyle(intensity) {\n    const boundedIntensity = Math.min(1, Math.max(0, Number(intensity)));\n\n    return `rgb(${(1 - boundedIntensity) * 255}, ${boundedIntensity * 255}, 0)`;\n}\n\nfunction clearPlot(ctx, plotSettings) {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = \"#A0A0A0\";\n    ctx.fillRect(plotSettings.x0, plotSettings.y0, plotSettings.width, plotSettings.height);\n}\n\nfunction drawGenotype(ctx, plotSettings, genotype) {\n    let index = 0;\n    let x = 0;\n    let y = 0;\n    const numGroupBits = 2 * NUM_GENOTYPE_GROUPS;\n    const w = plotSettings.cellSize * 2 + S2;\n\n    while (index < numGroupBits) {\n        ctx.fillStyle = fillStyle(genotype[index]);\n        ctx.fillRect(x + plotSettings.x0 + S1, y + plotSettings.y0 + S1, w, w);\n\n        index += 1;\n        if (index % NUM_GENOTYPE_GROUPS === 0) {\n            x = 0;\n            y += w + S1;\n        } else {\n            x += w + S1;\n        }\n    }\n\n    y += S3;\n    const plotCell = function(index, x, y) {\n        ctx.fillStyle = fillStyle(genotype[index]);\n        ctx.fillRect(x + plotSettings.x0 + S1, y + plotSettings.y0 + S1, plotSettings.cellSize, plotSettings.cellSize);\n    }\n\n    let col = 0;\n    while (index < genotype.length) {\n        plotCell(index    , x, y);\n        plotCell(index + 1, x + plotSettings.cellSize + S2, y);\n        plotCell(index + 2, x, y + plotSettings.cellSize + S2);\n        plotCell(index + 3, x + plotSettings.cellSize + S2, y + plotSettings.cellSize + S2);\n\n        col += 1;\n        index += 4;\n        if (col % SEED_SIZE === 0) {\n            x = 0;\n            y += w + S1;\n        } else {\n            x += w + S1;\n        }\n    }\n}\n\nexport function GenotypePlot({ genotype, plotId }) {\n    const [plotSettings, setPlotSettings] = useState();\n\n    useEffect(() => {\n        const canvas = document.getElementById(plotId);\n        if (canvas.width === plotSettings?.canvasWidth) {\n            return;\n        }\n\n        const horizontalCellSpacing = (SEED_SIZE + 1) * S1;\n        const horizontalCellSpace = canvas.width - horizontalCellSpacing;\n        const verticalCellSpacing = (SEED_SIZE + 3) * S1 + S3;\n        const verticalCellSpace = canvas.height - verticalCellSpacing;\n        const bigCellMaxWidth = Math.floor(horizontalCellSpace / SEED_SIZE);\n        const bigCellMaxHeight = Math.floor(verticalCellSpace / (SEED_SIZE + 2));\n        const bigCellMaxSize = Math.min(bigCellMaxHeight, bigCellMaxWidth); \n        const cellSize = Math.floor((bigCellMaxSize - S2) / 2);\n        const bigCellSize = cellSize * 2 + S2;\n        const width = horizontalCellSpacing + SEED_SIZE * bigCellSize;\n        const height = verticalCellSpacing + (SEED_SIZE + 2) * bigCellSize;\n        const settings = {\n            canvasWidth: canvas.width,\n            cellSize,\n            x0: Math.floor((canvas.width - width) / 2),\n            y0: Math.floor((canvas.height - height) / 2),\n            width,\n            height,\n        }\n\n        console.info({w: canvas.width, h: canvas.height, horizontalCellSpace, verticalCellSpace, bigCellSize});\n        console.info(\"Plot settings:\", settings);\n\n        setPlotSettings(settings);\n    }, [plotSettings, plotId]);\n\n    useEffect(() => {\n        if (!plotSettings) {\n            return;\n        }\n\n        const canvas = document.getElementById(plotId);\n        const ctx = canvas.getContext('2d');\n\n        if (genotype) {\n            drawGenotype(ctx, plotSettings, genotype);\n        } else {\n            clearPlot(ctx, plotSettings);\n        }\n    }, [plotSettings, plotId, genotype]);\n\n    return <div className=\"plot-container\">\n        <canvas className=\"plot\" id={plotId} height={200}></canvas>\n    </div>;\n}","import { useEffect, useState } from 'react';\nimport { SEED_SIZE } from '../shared/Constants';\n\n// Separation between the cells\nconst S1 = 3;\n\nfunction fillStyle(intensity) {\n    const boundedIntensity = (1 - Math.min(1, Math.max(0, Number(intensity)))) * 255;\n\n    return `rgb(${boundedIntensity}, ${boundedIntensity}, ${boundedIntensity})`;\n}\n\nfunction clearPlot(ctx, plotSettings) {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n}\n\nfunction drawPhenotype(ctx, plotSettings, phenotype) {\n    let index = 0;\n    let x = 0;\n    let y = 0;\n\n    while (index < phenotype.length) {\n        ctx.fillStyle = fillStyle(phenotype[index]);\n        ctx.fillRect(x + plotSettings.x0, y + plotSettings.y0, plotSettings.cellSize, plotSettings.cellSize);\n\n        index += 1;\n        if (index % SEED_SIZE === 0) {\n            x = 0;\n            y += plotSettings.cellSize + S1;\n        } else {\n            x += plotSettings.cellSize + S1;\n        }\n    }\n}\n\nexport function PhenotypePlot({ phenotype, plotId }) {\n    const [plotSettings, setPlotSettings] = useState();\n\n    useEffect(() => {\n        if (plotSettings) {\n            return;\n        }\n\n        const canvas = document.getElementById(plotId);\n        const cellSpacing = (SEED_SIZE - 1) * S1;\n        const horizontalCellSpace = canvas.width - cellSpacing;\n        const verticalCellSpace = canvas.height - cellSpacing;\n        const cellMaxWidth = Math.floor(horizontalCellSpace / SEED_SIZE);\n        const cellMaxHeight = Math.floor(verticalCellSpace / SEED_SIZE);\n        const cellSize = Math.min(cellMaxHeight, cellMaxWidth); \n        const width = cellSpacing + SEED_SIZE * cellSize;\n        const height = cellSpacing + SEED_SIZE * cellSize;\n        const settings = {\n            cellSize,\n            x0: Math.floor((canvas.width - width) / 2),\n            y0: Math.floor((canvas.height - height) / 2),\n            width,\n            height,\n        }\n\n        console.info(\"Plot settings:\", settings);\n\n        setPlotSettings(settings);\n    }, [plotSettings, plotId]);\n\n    useEffect(() => {\n        if (!plotSettings) {\n            return;\n        }\n\n        const canvas = document.getElementById(plotId);\n        const ctx = canvas.getContext('2d');\n\n        if (phenotype) {\n            drawPhenotype(ctx, plotSettings, phenotype);\n        } else {\n            clearPlot(ctx, plotSettings);\n        }\n    }, [plotSettings, plotId, phenotype]);\n\n    return <div className=\"plot-container\">\n        <canvas className=\"plot\" id={plotId} height={200}></canvas>\n    </div>;\n}","import './App.css';\nimport { useState } from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n\nimport { EaGraph } from './components/EaGraph';\nimport { EaRunner } from './components/EaRunner';\nimport { EaState } from './components/EaState';\nimport { CaRunner } from './components/CaRunner';\nimport { GenotypePlot } from './components/GenotypePlot';\nimport { PhenotypePlot } from './components/PhenotypePlot';\n\nfunction App() {\n  const [eaState, setEaState] = useState();\n\n  return (\n    <div className=\"App\">\n\n      <Container>\n        <Row>\n          <Col lg={4} xs={6}>\n            <Container>\n              <Row>\n                <Col><EaRunner onStep={setEaState}></EaRunner></Col>\n              </Row>\n              <Row>\n                <EaState eaState={eaState} />\n              </Row>\n            </Container>            \n          </Col>\n          <Col lg={8} xs={12}>\n            <EaGraph eaState={eaState} />\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={3}>\n            <h3>Gene distribution</h3>\n            <GenotypePlot genotype={eaState?.geneDistribution} plotId=\"gene-distribution\" />\n          </Col>\n          <Col lg={3}>\n            <h3>Best genotype</h3>\n            <GenotypePlot genotype={eaState?.bestGenotype} plotId=\"best-genotype\" />\n          </Col>\n          <Col lg={3}>\n            <h3>Cell distribution</h3>\n            <PhenotypePlot phenotype={eaState?.cellDistribution} plotId=\"cell-distribution\" />\n          </Col>\n          <Col lg={3}>\n            <h3>Best phenotype</h3>\n            <PhenotypePlot phenotype={eaState?.bestPhenotype} plotId=\"best-phenotype\" />\n          </Col>\n        </Row>\n      </Container>\n      <CaRunner seed={eaState?.bestPhenotype} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}